name: Build and Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  APP_NAME: idlemmo-conquest
  DEPLOY_PATH: /home/${{ secrets.VPS_USER }}/idlemmo-conquest

jobs:
  build:
    runs-on: ubuntu-22.04
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm build
        env:
          DB_FILE_NAME: ${{ secrets.DB_FILE_NAME }}
          SECRET_API_KEY: ${{ secrets.SECRET_API_KEY }}

  deploy:
    needs: build
    environment: production
    runs-on: ubuntu-22.04
    timeout-minutes: 15

    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          timeout: 600s
          script: |
            set -e

            # Update package list
            sudo apt update

            # Install nginx if not present
            if ! command -v nginx &> /dev/null; then
              sudo apt install -y nginx
              sudo systemctl enable nginx
            fi

            # Install Node.js 22 if not present
            if ! command -v node &> /dev/null || [[ $(node -v | cut -d'.' -f1 | cut -d'v' -f2) -lt 22 ]]; then
              curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi

            # Install pnpm if not present
            if ! command -v pnpm &> /dev/null; then
              sudo npm install -g pnpm
            fi

            # Install PM2 if not present
            if ! command -v pm2 &> /dev/null; then
              sudo npm install -g pm2
            fi

            # Create deployment directory
            mkdir -p ${{ env.DEPLOY_PATH }}
            cd ${{ env.DEPLOY_PATH }}

            # Stop existing PM2 process before deployment
            pm2 delete ${{ env.APP_NAME }} 2>/dev/null || true

            # Clone/pull latest code
            if [ ! -d ".git" ]; then
              git clone ${{ github.server_url }}/${{ github.repository }}.git .
            else
              git fetch origin
              git reset --hard origin/main
            fi

            # Create .env file
            echo '${{ secrets.ENV_FILE }}' > .env
            chmod 600 .env

            # Install dependencies and build
            export NODE_OPTIONS="--max-old-space-size=1024"
            pnpm install --frozen-lockfile
            pnpm build

            # Run database migrations
            pnpm run drizzle:migrate

            # Configure nginx (only if config doesn't exist)
            if [ ! -f /etc/nginx/sites-available/${{ env.APP_NAME }} ]; then
              echo "Creating nginx configuration..."
              sudo tee /etc/nginx/sites-available/${{ env.APP_NAME }} > /dev/null <<'EOF'
            server {
                listen 80;
                listen [::]:80;
                server_name ${{ env.APP_NAME }}.com www.${{ env.APP_NAME }}.com;

                add_header X-Frame-Options "SAMEORIGIN" always;
                add_header X-Content-Type-Options "nosniff" always;
                add_header X-XSS-Protection "1; mode=block" always;
                add_header Referrer-Policy "strict-origin-when-cross-origin" always;

                gzip on;
                gzip_vary on;
                gzip_min_length 1024;
                gzip_types text/plain text/css text/xml text/javascript 
                          application/javascript application/xml+rss 
                          application/json image/svg+xml;

                location /_next/static/ {
                    proxy_pass http://localhost:3000;
                    proxy_cache_valid 200 1y;
                    add_header Cache-Control "public, immutable";
                }

                location /_next/image {
                    proxy_pass http://localhost:3000;
                    proxy_cache_valid 200 1h;
                }

                location / {
                    proxy_pass http://localhost:3000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_cache_bypass $http_upgrade;
                    
                    proxy_connect_timeout 60s;
                    proxy_send_timeout 60s;
                    proxy_read_timeout 60s;
                }

                location /health {
                    access_log off;
                    return 200 "healthy\n";
                    add_header Content-Type text/plain;
                }
            }
            EOF

              # Enable nginx site
              sudo ln -sf /etc/nginx/sites-available/${{ env.APP_NAME }} /etc/nginx/sites-enabled/
              sudo rm -f /etc/nginx/sites-enabled/default

              # Test and reload nginx
              sudo nginx -t
              sudo systemctl reload nginx
              
              echo "Nginx configuration created and enabled."
            else
              echo "Nginx configuration already exists, skipping creation."
              # Still reload nginx in case there are other changes
              sudo nginx -t && sudo systemctl reload nginx
            fi

            # Start new PM2 process
            pm2 start "pnpm start" \
              --name "${{ env.APP_NAME }}" \
              --cwd "${{ env.DEPLOY_PATH }}" \
              --env NODE_ENV=production \
              --env PORT=3000 \
              --max-memory-restart 1024M

            # Save PM2 configuration
            pm2 save

            # Setup PM2 startup script (run once)
            sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u ${{ secrets.VPS_USER }} --hp /home/${{ secrets.VPS_USER }} || true

            # Clean up
            pnpm store prune

            echo "Deployment completed successfully!"
